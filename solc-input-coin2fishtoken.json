{
    "language": "Solidity",
    "sources": {
        "./Coin2FishToken.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// Coin2Fish Contract (Coin2FishToken.sol)\n\npragma solidity 0.8.15;\n\nimport \"./contracts/ERC20.sol\";\nimport \"./access/Ownable.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\n\n/**\n * @title Coin2Fish Contract for Coin2Fish Reborn Token\n * @author HeisenDev\n */\ncontract Coin2Fish is ERC20, Ownable {\n    using SafeMath for uint256;\n    IUniswapV2Router02 public uniswapV2Router;\n\n    /**\n     * Definition of the token parameters\n     */\n    string private _tokenName = \"Coin2Fish Reborn\";\n    string private _tokenSymbol = \"C2FR\";\n    uint private _tokenTotalSupply = 100000000 * 10 ** 18;\n    uint private _tokenDecimals = 18;\n\n    /**\n     * Price definitions\n     */\n    uint private eggCommonPresalePrice = 0.1 ether;\n    uint private eggCommonPrice = 0.14 ether;\n    uint private eggCommonPriceC2FR = 3500 ether;\n    uint private eggRarePricePresale = 0.22 ether;\n    uint private eggRarePrice = 0.31 ether;\n    uint private eggRarePriceC2FR = 7500 ether;\n    uint private eggCommonSells = 0;\n    uint private eggRareSells = 0;\n    bool public eggSalesStatus = false;\n\n    mapping(address => uint256) private _authorizedWithdraws;\n    mapping(address => uint256) private _accountTransactionLast;\n    mapping(address => uint256) private _accountTransactionCount;\n    mapping(address => uint256) private _accountWithdrawalLast;\n    mapping(address => uint256) private _accountWithdrawalCount;\n\n\n    uint public withdrawPrice = 0.004 ether;\n\n    /**\n     * Limits Definitions\n     * `_maxWalletAmount` Represents the maximum value to store in a Wallet\n     * It is initialized with the 0.5% of total supply (500.000 C2FR Tokens)\n     *\n     * `_maxTransactionAmount` Represents the maximum value to make a transfer\n     * It is initialized with the 0.5% of total supply (500.000 C2FR Tokens)\n     *\n     * These limitations can be modified by the methods\n     * {setMaxTransactionAmount} and {setMaxWalletAmount}.\n     */\n\n    uint256 public _maxWalletAmount = _tokenTotalSupply.div(200);\n    uint256 public _maxTransactionAmount = _tokenTotalSupply.div(200);\n    uint256 public _maxTransactionCount = 10;\n    uint256 public _maxWithdrawalCount = 1;\n    uint256 public _maxTransactionWithdrawAmount = 100000 ether;\n\n    /**\n     * Definition of the Project Wallets\n     * `addressHeisenDev` Corresponds to the wallet address where the development\n     * team will receive their payments\n     * `addressMarketing` Corresponds to the wallet address where the funds\n     * for marketing will be received\n     * `addressTeam` Represents the wallet where teams and other\n     * collaborators will receive their payments\n     */\n    address payable public addressHeisenDev = payable(0xEDa73409d4bBD147f4E1295A73a2Ca243a529338);\n    address payable public addressMarketing = payable(0x3c1Cd83D8850803C9c42fF5083F56b66b00FBD61);\n    address payable public addressTeam = payable(0x63024aC73FE77427F20e8247FA26F470C0D9700B);\n\n    /**\n     * Definition of the taxes fees for swaps\n     * `taxFeeHeisenDev` 0%  Initial tax fee during presale\n     * `taxFeeMarketing` 0%  Initial tax fee during presale\n     * `taxFeeTeam` 0%  Initial tax fee during presale\n     * `taxFeeLiquidity` 0%  Initial tax fee during presale\n     * This value can be modified by the method {updateTaxesFees}\n     */\n    uint public taxFeeHeisenDev = 0;\n    uint public taxFeeMarketing = 0;\n    uint public taxFeeTeam = 0;\n    uint public taxFeeLiquidity = 0;\n\n    /**\n     * Definition of pools\n     * `_poolHeisenDev`\n     * `_poolMarketing`\n     * `_poolTeam`\n     * `_poolLiquidity`\n     */\n    uint public _poolHeisenDev = 0;\n    uint public _poolMarketing = 0;\n    uint public _poolTeam = 0;\n    uint public _poolLiquidity = 0;\n\n    /**\n     * Store the last configuration of tax fees\n     * `previousHeisenDevTaxFee` store the previous value of `taxFeeHeisenDev`\n     * `previousMarketingTaxFee` store the previous value of `taxFeeMarketing`\n     * `previousTeamTaxFee` store the previous value of `taxFeeLiquidity`\n     * `previousLiquidityTaxFee` store the previous value of `taxFeeTeam`\n     */\n    uint public previousHeisenDevTaxFee = taxFeeHeisenDev;\n    uint public previousMarketingTaxFee = taxFeeMarketing;\n    uint public previousTeamTaxFee = taxFeeTeam;\n    uint public previousLiquidityTaxFee = taxFeeLiquidity;\n\n\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) private _isExcludedFromLimits;\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    event Deposit(address indexed sender, uint amount);\n    event BuyCommonEgg(uint amount);\n    event BuyRareEgg(uint amount);\n    event EggSalesStatus(bool status);\n    event Withdraw(uint amount);\n    event TeamPayment(uint amount);\n    event SwapAndAddLiquidity(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event UpdateTaxesFees(\n        uint256 taxFeeHeisenDev,\n        uint256 taxFeeMarketing,\n        uint256 taxFeeTeam,\n        uint256 taxFeeLiquidity\n    );\n    event UpdateWithdrawOptions(\n        uint256 withdrawPrice\n    );\n    constructor(address[] memory _constructorOwners, address _constructorBackend) ERC20(_tokenName, _tokenSymbol) {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n\n        uniswapV2Router = _uniswapV2Router;\n\n        automatedMarketMakerPairs[_uniswapV2Pair] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[addressHeisenDev] = true;\n        _isExcludedFromFees[addressMarketing] = true;\n        _isExcludedFromFees[addressTeam] = true;\n\n        _isExcludedFromLimits[address(this)] = true;\n        _isExcludedFromLimits[_uniswapV2Pair] = true;\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(address(this), _tokenTotalSupply);\n        /*\n            _setOwners is an internal function in Ownable.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _setOwners(_constructorOwners);\n        /*\n            _transferBackend is an internal function in Ownable.sol\n        */\n        _transferBackend(_constructorBackend);\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    receive() external payable {\n        if (msg.value > 0) {\n            emit Deposit(_msgSender(), msg.value);\n        }\n    }\n\n    function buyCommonEgg(uint amount) public payable {\n        require(eggSalesStatus, \"Presale isn't enabled\");\n        require(amount >= 0, \"Amount must be greater than 0\");\n        require(msg.value >= (eggCommonPresalePrice.mul(amount)), \"The amount sent is not equal to the amount required\");\n        eggCommonSells = eggCommonSells.add(amount);\n        addLiquidity(msg.value);\n        emit BuyCommonEgg(amount);\n    }\n\n    function buyRareEgg(uint256 amount) public payable {\n        require(eggSalesStatus, \"Presale isn't enabled\");\n        require(amount >= 0, \"Amount must be greater than 0\");\n        require(msg.value >= (eggRarePricePresale.mul(amount)), \"The amount sent is not equal to the amount required\");\n        eggRareSells = eggRareSells.add(amount);\n        addLiquidity(msg.value);\n        emit BuyRareEgg(amount);\n    }\n\n    function teamPayment() external onlyOwner {\n        super._transfer(address(this), addressHeisenDev, _poolHeisenDev);\n        super._transfer(address(this), addressMarketing, _poolMarketing);\n        super._transfer(address(this), addressTeam, _poolTeam);\n        uint256 amount = _poolHeisenDev + _poolMarketing + _poolTeam;\n        _poolHeisenDev = 0;\n        _poolMarketing = 0;\n        _poolTeam = 0;\n        emit TeamPayment(amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        if (_isExcludedFromLimits[from] == false) {\n            require(amount <= _maxTransactionAmount, \"Transfer amount exceeds the max transaction amount.\");\n        }\n        if (_isExcludedFromLimits[to] == false) {\n            require(balanceOf(to) + amount <= _maxWalletAmount, 'Transfer amount exceeds the max Wallet Amount.');\n        }\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\n\n        if (takeFee && automatedMarketMakerPairs[from]) {\n            uint256 heisenDevAmount = amount.mul(taxFeeHeisenDev).div(100);\n            uint256 marketingAmount = amount.mul(taxFeeMarketing).div(100);\n            uint256 teamAmount = amount.mul(taxFeeTeam).div(100);\n            uint256 liquidityAmount = amount.mul(taxFeeLiquidity).div(100);\n\n            _poolHeisenDev = _poolHeisenDev.add(heisenDevAmount);\n            _poolMarketing = _poolMarketing.add(marketingAmount);\n            _poolTeam = _poolTeam.add(teamAmount);\n            _poolLiquidity = _poolLiquidity.add(liquidityAmount);\n        }\n        super._transfer(from, to, amount);\n    }\n\n    function swapAndAddLiquidity() private {\n        uint256 half = _poolLiquidity.div(2);\n        uint256 otherHalf = _poolLiquidity.sub(half);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForEth(half);\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n        addLiquidity(newBalance);\n        _poolLiquidity = 0;\n        emit SwapAndAddLiquidity(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function updateTaxesFees(uint256 _heisenDevTaxFee, uint256 _marketingTaxFee, uint256 _teamTaxFee, uint256 _liquidityTaxFee) private {\n        previousHeisenDevTaxFee = taxFeeHeisenDev;\n        previousMarketingTaxFee = taxFeeMarketing;\n        previousTeamTaxFee = taxFeeTeam;\n        previousLiquidityTaxFee = taxFeeLiquidity;\n        taxFeeHeisenDev = _heisenDevTaxFee;\n        taxFeeMarketing = _marketingTaxFee;\n        taxFeeTeam = _teamTaxFee;\n        taxFeeLiquidity = _liquidityTaxFee;\n        emit UpdateTaxesFees(_heisenDevTaxFee, _marketingTaxFee, _teamTaxFee, _liquidityTaxFee);\n    }\n\n    function updateWithdrawOptions(uint256 _withdrawPrice) private {\n        withdrawPrice = _withdrawPrice;\n        emit UpdateWithdrawOptions(_withdrawPrice);\n    }\n\n    function updateEggSales(bool _eggSalesStatus) private {\n        eggSalesStatus = _eggSalesStatus;\n        emit EggSalesStatus(_eggSalesStatus);\n    }\n\n    function addLiquidity(uint256 bnb) private {\n        _approve(address(this), address(uniswapV2Router), balanceOf(address(this)));\n        uniswapV2Router.addLiquidityETH{value : bnb}(\n            address(this),\n            balanceOf(address(this)),\n            0, // Take any amount of tokens (ratio varies)\n            0, // Take any amount of BNB (ratio varies)\n            addressHeisenDev,\n            block.timestamp.add(300)\n        );\n    }\n\n    function withdrawAuthorization(address to, uint256 amount, uint256 fee) external onlyBackend {\n        require(to != addressHeisenDev, \"Heisen can't make withdrawals\");\n        require(to != addressMarketing, \"Skyler can't make withdrawals\");\n        require(to != addressTeam, \"Team can't make withdrawals\");\n        require(amount <= _maxTransactionWithdrawAmount, \"Amount can't exceeds the historical max buy\");\n\n        if (_authorizedWithdraws[to] > 0) {\n            _authorizedWithdraws[to] = 0;\n        }\n        else {\n            uint256 amountFee = amount.mul(fee).div(100);\n            uint256 totalTaxes = taxFeeHeisenDev + taxFeeMarketing + taxFeeTeam;\n            if (totalTaxes == 0) {\n                _poolHeisenDev = _poolHeisenDev.add(amountFee);\n            }\n            else {\n                taxFeeHeisenDev = taxFeeHeisenDev.mul(100).div(totalTaxes);\n                taxFeeMarketing = taxFeeMarketing.mul(100).div(totalTaxes);\n                taxFeeTeam = taxFeeTeam.mul(100).div(totalTaxes);\n                uint256 heisenDevAmount = amountFee.mul(taxFeeHeisenDev).div(100);\n                uint256 marketingAmount = amountFee.mul(taxFeeMarketing).div(100);\n                uint256 teamAmount = amountFee.mul(taxFeeTeam).div(100);\n\n                amount = amount.sub(heisenDevAmount);\n                amount = amount.sub(marketingAmount);\n                amount = amount.sub(teamAmount);\n\n                _poolHeisenDev = _poolHeisenDev.add(heisenDevAmount);\n                _poolMarketing = _poolMarketing.add(marketingAmount);\n                _poolTeam = _poolTeam.add(teamAmount);\n            }\n            _authorizedWithdraws[to] = amount;\n        }\n    }\n\n    function withdrawAllowance(address account) public view virtual returns (uint256) {\n        return _authorizedWithdraws[account];\n    }\n\n    function withdrawGetPrice() public view virtual returns (uint256) {\n        return withdrawPrice;\n    }\n\n    function isUnderDailyTransactionLimit(address account) internal returns (bool) {\n        if (block.timestamp > _accountTransactionLast[account].add(24 hours)) {\n            _accountTransactionLast[account] = block.timestamp;\n            _accountTransactionCount[account] = 1;\n        }\n        else {\n            _accountTransactionCount[account] = _accountTransactionCount[account].add(1);\n        }\n        if (_accountTransactionCount[account] > _maxTransactionCount)\n            return false;\n        return true;\n    }\n\n    function isUnderDailyWithdrawalLimit(address account) internal returns (bool) {\n        if (block.timestamp > _accountWithdrawalLast[account].add(24 hours)) {\n            _accountWithdrawalLast[account] = block.timestamp;\n            _accountWithdrawalCount[account] = 1;\n        }\n        else {\n            _accountWithdrawalCount[account] = _accountWithdrawalCount[account].add(1);\n        }\n        return (_accountWithdrawalCount[account] <= _maxWithdrawalCount);\n    }\n\n    function withdraw() public payable {\n        require(_msgSender() != backend(), \"Backend can't make withdrawals\");\n        require(_msgSender() != addressHeisenDev, \"Heisen can't make withdrawals\");\n        require(_msgSender() != addressMarketing, \"Skyler can't make withdrawals\");\n        require(_msgSender() != addressTeam, \"Team can't make withdrawals\");\n        require(isUnderDailyWithdrawalLimit(_msgSender()), \"The amount sent is not equal to the amount required for withdraw\");\n        require(msg.value >= (withdrawPrice), \"The amount sent is not equal to the BNB amount required for withdraw\");\n        uint256 amount = _authorizedWithdraws[_msgSender()];\n        super._transfer(address(this), _msgSender(), amount);\n        _authorizedWithdraws[_msgSender()] = 0;\n        emit Withdraw(amount);\n    }\n    function submitProposal(\n        bool _updateEggSales,\n        bool _eggSalesStatus,\n        bool _swapAndAddLiquidity,\n        bool _updateWithdrawOptions,\n        uint256 _withdrawPrice,\n        bool _updateTaxesFees,\n        uint256 _heisenDevTaxFee,\n        uint256 _marketingTaxFee,\n        uint256 _teamTaxFee,\n        uint256 _liquidityTaxFee,\n        bool _transferBackend,\n        address _backendAddress\n    ) external onlyOwner {\n        if (_updateWithdrawOptions) {\n            require(withdrawPrice <= 0.001 ether, \"MultiSignatureWallet: Must keep 0.001 BNB or less\");\n        }\n        if (_updateTaxesFees) {\n            uint256 sellTotalFees = _heisenDevTaxFee + _marketingTaxFee + _teamTaxFee + _liquidityTaxFee;\n            require(sellTotalFees <= 10, \"MultiSignatureWallet: Must keep fees at 10% or less\");\n        }\n        if (_transferBackend) {\n            require(_backendAddress != address(0), \"MultiSignatureWallet: new owner is the zero address\");\n        }\n        proposals.push(Proposal({\n        author: _msgSender(),\n        executed: false,\n        updateEggSales: _updateEggSales,\n        eggSalesStatus: _eggSalesStatus,\n        swapAndAddLiquidity: _swapAndAddLiquidity,\n        updateWithdrawOptions: _updateWithdrawOptions,\n        withdrawPrice: _withdrawPrice,\n        updateTaxesFees: _updateTaxesFees,\n        heisenDevTaxFee: _heisenDevTaxFee,\n        marketingTaxFee: _marketingTaxFee,\n        teamTaxFee: _teamTaxFee,\n        liquidityTaxFee: _liquidityTaxFee,\n        transferBackend: _transferBackend,\n        backendAddress: _backendAddress\n        }));\n        emit SubmitProposal(proposals.length - 1);\n    }\n\n    function approveProposal(uint _proposalId) external onlyOwner proposalExists(_proposalId) proposalNotApproved(_proposalId) proposalNotExecuted(_proposalId)\n    {\n        proposalApproved[_proposalId][_msgSender()] = true;\n        emit ApproveProposal(_msgSender(), _proposalId);\n    }\n\n    function _getApprovalCount(uint _proposalId) private view returns (uint256) {\n        uint256 count = 0;\n        for (uint i; i < requiredConfirmations(); i++) {\n            if (proposalApproved[_proposalId][getOwner(i)]) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n\n    function executeProposal(uint _proposalId) external proposalExists(_proposalId) proposalNotExecuted(_proposalId) {\n        require(_getApprovalCount(_proposalId) >= requiredConfirmations(), \"approvals is less than required\");\n        Proposal storage proposal = proposals[_proposalId];\n        proposal.executed = true;\n        if (proposal.updateEggSales) {\n            updateEggSales(proposal.eggSalesStatus);\n        }\n        if (proposal.swapAndAddLiquidity) {\n            swapAndAddLiquidity();\n        }\n        if (proposal.updateWithdrawOptions) {\n            updateWithdrawOptions(withdrawPrice);\n        }\n        if (proposal.updateTaxesFees) {\n            updateTaxesFees(proposal.heisenDevTaxFee ,proposal.marketingTaxFee ,proposal.teamTaxFee ,proposal.liquidityTaxFee);\n        }\n        if (proposal.transferBackend) {\n            _transferBackend(proposal.backendAddress);\n        }\n    }\n\n    function revokeProposal(uint _proposalId) external\n    onlyOwner\n    proposalExists(_proposalId)\n    proposalNotExecuted(_proposalId)\n    {\n        require(proposalApproved[_proposalId][_msgSender()], \"tx not proposalApproved\");\n        proposalApproved[_proposalId][_msgSender()] = false;\n        emit RevokeProposal(_msgSender(), _proposalId);\n    }\n}\n"
        },
        "./contracts/ERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../libraries/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n    }\n}\n"
        },
        "./utils/Context.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
        },
        "./interfaces/IERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "./interfaces/IERC20Metadata.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
        },
        "./libraries/SafeMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title SafeMath\n * @dev Wrappers over Solidity's arithmetic operations.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
        },
        "./access/Ownable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// Coin2Fish Contract (access/Ownable.sol)\n\npragma solidity 0.8.15;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/MultiSigWallet.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context, MultiSignatureWallet {\n    address private _backend;\n    address private _owner;\n    address[] private _owners;\n    mapping(address => bool) private isOwner;\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    function requiredConfirmations() internal view returns (uint256) {\n        return _owners.length;\n    }\n    /**\n     * @dev Returns the address of the current backend.\n     */\n    function backend() internal view returns (address) {\n        return _backend;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner[_msgSender()],  \"Ownable: caller is not an owner\");\n        _;\n    }\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyBackend() {\n        require(backend() == _msgSender(), \"Ownable: caller is not the backend\");\n        _;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function isAnOwner(address account) internal view returns (bool) {\n        return isOwner[account];\n    }\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function getOwner(uint256 index) internal view returns (address) {\n        return _owners[index];\n    }\n    /**\n     * @dev Transfers backend Control of the contract to a new account (`newBackend`).\n     * Can only be called by the current owner.\n     */\n    function _transferBackend(address newBackend) internal virtual  {\n        require(newBackend != address(0), \"Ownable: new owner is the zero address\");\n        _backend = newBackend;\n    }\n    function _setOwners(address[] memory _constructorOwners) internal virtual {\n        require(_constructorOwners.length >= 3, \"Ownable: Requires the at least three owners\");\n        for (uint i = 0; i < _constructorOwners.length; i++) {\n            address newOwner = _constructorOwners[i];\n            require(newOwner != address(0), \"Ownable: Owner is the zero address\");\n            require(!isOwner[newOwner], \"Ownable: Owner is not unique\");\n            isOwner[newOwner] = true;\n            _owner = msg.sender;\n        }\n    }\n}\n"
        },
        "./utils/MultiSigWallet.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// Coin2Fish Contract (utils/MultiSigWallet.sol)\n\npragma solidity 0.8.15;\n\ncontract MultiSignatureWallet {\n    event DepositProposal(address indexed sender, uint amount);\n    event SubmitProposal(uint indexed proposalId);\n    event ApproveProposal(address indexed owner, uint indexed proposalId);\n    event RevokeProposal(address indexed owner, uint indexed proposalId);\n\n    struct Proposal {\n        address author;\n        bool executed;\n        bool updateEggSales;\n        bool eggSalesStatus;\n        bool swapAndAddLiquidity;\n        bool updateWithdrawOptions;\n        uint256 withdrawPrice;\n        bool updateTaxesFees;\n        uint256 heisenDevTaxFee;\n        uint256 marketingTaxFee;\n        uint256 teamTaxFee;\n        uint256 liquidityTaxFee;\n        bool transferBackend;\n        address backendAddress;\n    }\n\n    Proposal[] public proposals;\n\n    uint256 required = 2;\n\n    mapping(uint => mapping(address => bool)) internal proposalApproved;\n    constructor() {}\n\n    modifier proposalExists(uint _proposalId) {\n        require(_proposalId < proposals.length, \"MultiSignatureWallet: proposal does not exist\");\n        _;\n    }\n\n    modifier proposalNotApproved(uint _proposalId) {\n        require(!proposalApproved[_proposalId][msg.sender], \"MultiSignatureWallet: proposal already was approved by owner\");\n        _;\n    }\n\n    modifier proposalNotExecuted(uint _proposalId) {\n        require(!proposals[_proposalId].executed, \"MultiSignatureWallet: proposal was already executed\");\n        _;\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Factory.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
        },
        "./interfaces/IUniswapV2Router02.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\nimport \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n    external\n    returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n    external\n    payable\n    returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}